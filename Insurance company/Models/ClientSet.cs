//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Insurance_company.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Text.RegularExpressions;
    using Helpers;

    public partial class ClientSet : IDataErrorInfo
    {
        public ClientSet()
        {
            this.PolicySet = new HashSet<PolicySet>();
        }
    
        public int ClientId { get; set; }
        public string Surname { get; set; }
        public string Name { get; set; }
        public string PESEL { get; set; }
        public int AdressAdressId { get; set; }
    
        public virtual AdressSet AdressSet { get; set; }
        public virtual ICollection<PolicySet> PolicySet { get; set; }


        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string result = string.Empty;
                switch (columnName)
                {
                    case "Surname":
                        {
                            if (string.IsNullOrEmpty(Surname))
                            {
                                result = "Surname is required!";
                                break;
                            }

                            if (!Regex.IsMatch(Surname, @"^[A-Za-zøüÊÒÛ≥ÍπúØè∆•å £”—]+$"))
                                result = "Only letters!";

                            break;
                        }
                    case "Name":
                        {
                            if (string.IsNullOrEmpty(Name))
                            {
                                result = "Name is required!";
                                break;
                            }

                            if (!Regex.IsMatch(Name, @"^[A-Za-zøüÊÒÛ≥ÍπúØè∆•å £”—]+$"))
                                result = "Only letters!";

                            break;
                        }
                    case "PESEL":
                        {
                            if (string.IsNullOrEmpty(PESEL))
                            {
                                result = "PESEL is required!";
                                break;
                            }

                            if (!Regex.IsMatch(PESEL, @"^[0-9]{11}$"))
                                result = "11 digits!";

                            break;
                        }
                };
                return result;
            }
        }
        
    }
}
