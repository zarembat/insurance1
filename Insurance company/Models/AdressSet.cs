//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Insurance_company.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Text.RegularExpressions;

    public partial class AdressSet : IDataErrorInfo
    {
        public AdressSet()
        {
            this.ClientSet = new HashSet<ClientSet>();
        }
    
        public int AdressId { get; set; }
        public string Town { get; set; }
        public string Street { get; set; }
        public string HouseNumber { get; set; }
        public string ZipCode { get; set; }
    
        public virtual ICollection<ClientSet> ClientSet { get; set; }
        public virtual HouseSet HouseSet { get; set; }

        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public string this[string columnName]
        {
            get
            {
                string result = string.Empty;
                switch (columnName)
                {
                    case "Town":
                        {
                            if (string.IsNullOrEmpty(Town))
                            {
                                result = "Town is required!";
                                break;
                            }

                            if (!Regex.IsMatch(Town, @"^[A-Za-zøüÊÒÛ≥ÍπúØè∆•å £”—]+$"))
                                result = "Only letters!";

                            break;
                        }
                    case "Street":
                        {
                            if (string.IsNullOrEmpty(Street))
                            {
                                result = "Street is required!";
                                break;
                            }

                            if (!Regex.IsMatch(Street, @"^[A-Za-zøüÊÒÛ≥ÍπúØè∆•å £”—]+$"))
                                result = "Only letters!";

                            break;
                        }
                    case "HouseNumber":
                        {
                            if (string.IsNullOrEmpty(HouseNumber))
                            {
                                result = "House number is required!";
                                break;
                            }

                            char[] letters = HouseNumber.ToCharArray();
                            if (!(Char.IsDigit(letters[0])))
                            {
                                result = "Wrong format! e.g. 12a/12/10";
                                break;
                            }

                            bool isBackSlash = false;
                            for (int i = 1; i < letters.Length; i++)
                            {
                                if (!isBackSlash)
                                {
                                    if (!(Char.IsDigit(letters[i - 1])))
                                    {
                                        if (!(letters[i].Equals('/')))
                                        {
                                            result = "Wrong format! e.g. 12a/12";
                                            break;
                                        }
                                    }

                                    if (letters[i].Equals('/'))
                                        isBackSlash = true;
                                }

                                else
                                {
                                    if (!(Char.IsDigit(letters[i])))
                                    {
                                        result = "Wrong format! e.g. 12a/12";
                                        break;
                                    }
                                }
                            }

                            if (letters[letters.Length - 1].Equals('/'))
                            {
                                result = "Wrong format! e.g. 12a/12";
                                break;
                            }

                            break;

                        }
                    case "ZipCode":
                        {
                            if (string.IsNullOrEmpty(ZipCode))
                            {
                                result = "Zip code is required!";
                                break;
                            }

                            if (!Regex.IsMatch(ZipCode, @"^[0-9]{2}\-[0-9]{3}$"))
                                result = "Wrong format e.g. 05-420!";

                            break;
                        }
                };
                return result;
            }
        }
    }
}
